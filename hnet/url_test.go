package hnet

import (
	"io"
	"strings"
	"testing"

	. "github.com/periaate/blume/core"
	"github.com/stretchr/testify/assert"
)

// Tests generated by ChatGPT and modified by hand.

// Test URL with custom Transformer
func TestURL_Custom(t *testing.T) {
	uppercaseTransformer := func(s URL) URL { return URL(strings.ToUpper(string(s))) }

	tests := []struct {
		input    URL
		options  []Monadic[URL, URL]
		expected URL
	}{
		{"example.com", []Monadic[URL, URL]{uppercaseTransformer}, "EXAMPLE.COM"},
		{"example.com", []Monadic[URL, URL]{AsProtocol(HTTP), uppercaseTransformer}, "HTTP://EXAMPLE.COM"},
		{"example.com", []Monadic[URL, URL]{AsProtocol(HTTPS)}, "https://example.com"},
		{"example.com", []Monadic[URL, URL]{AsProtocol(WS), uppercaseTransformer}, "WS://EXAMPLE.COM"},
		{"example.com", []Monadic[URL, URL]{AsProtocol(WSS)}, "wss://example.com"},
	}

	for _, tt := range tests {
		result := tt.input.Format(tt.options...)
		if result != tt.expected {
			t.Errorf("URL(%q, options...) = %q; want %q", tt.input, result, tt.expected)
		}
	}
}

func TestURL_ToRequest_ValidURL(t *testing.T) {
	url := URL("http://example.com")
	req := url.ToRequest(GET)
	assert.Nil(t, req.NetError)
	assert.NotNil(t, req.Request)
	assert.Equal(t, "http://example.com", req.URL.String())
	assert.Equal(t, "GET", req.Method)
}

func TestURL_ToRequest_EmptyURL(t *testing.T) {
	url := URL("")
	req := url.ToRequest(GET)
	assert.NotNil(t, req.NetError)
	assert.Nil(t, req.Request)
	assert.NotNil(t, req.NetError)
	assert.Contains(t, req.NetError.Error(), "Invalid URL")
}

func TestURL_ToRequest_MissingMethod(t *testing.T) {
	url := URL("http://example.com")
	req := url.ToRequest()
	assert.NotNil(t, req.NetError)
	assert.NotNil(t, req.NetError)
	assert.Contains(t, req.NetError.Error(), "Method not set")
}

func TestWithHeaders(t *testing.T) {
	url := URL("http://example.com")
	req := url.ToRequest(GET, WithHeaders([2]string{"Authorization", "Bearer token"}))
	assert.Nil(t, req.NetError)
	assert.Equal(t, "Bearer token", req.Header.Get("Authorization"))
}

func TestWithBody(t *testing.T) {
	bodyContent := "test body content"
	body := io.NopCloser(strings.NewReader(bodyContent))

	url := URL("http://example.com")
	req := url.ToRequest(POST, WithBody(body))
	assert.Nil(t, req.NetError)
	reqBody, err := io.ReadAll(req.Body)
	assert.NoError(t, err)
	assert.Equal(t, bodyContent, string(reqBody))
}

// these tests work, but take too long due to lack of integration with mock testing in the hnet package.
// var (
// 	fn     func(w http.ResponseWriter, r *http.Request)
// 	server *http.Server
// )
//
// func init() {
// 	server = &http.Server{
// 		Addr: "127.0.0.1:12799",
// 		Handler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
// 			fn(w, r)
// 		}),
// 	}
// 	go func() {
// 		_ = server.ListenAndServe()
// 	}()
// }
//
// func TestRequest_Call_Success(t *testing.T) {
// 	server := httpTestServer(func(w http.ResponseWriter, r *http.Request) {
// 		w.WriteHeader(http.StatusOK)
// 		_, _ = w.Write([]byte("response body"))
// 	})
//
// 	url := URL(server.Addr)
// 	req := url.ToRequest(GET)
// 	assert.NoError(t, req.Err)
//
// 	resp := req.Call()
// 	assert.Nil(t, resp.NetError)
// 	assert.NotNil(t, resp.Response)
// 	assert.Equal(t, http.StatusOK, resp.StatusCode)
//
// 	body, _ := io.ReadAll(resp.Body)
// 	assert.Equal(t, "response body", string(body))
// }
//
// func TestRequest_Call_Error(t *testing.T) {
// 	url := URL("http://invalid-url")
// 	req := url.ToRequest(GET)
//
// 	resp := req.Call()
// 	assert.NotNil(t, resp.NetError)
// 	assert.Contains(t, resp.NetError.Error(), "dial tcp: lookup invalid-url")
// }
//
// func TestResponse_UseBody_Success(t *testing.T) {
// 	server := httpTestServer(func(w http.ResponseWriter, r *http.Request) {
// 		w.WriteHeader(http.StatusOK)
// 		_, _ = w.Write([]byte("response body"))
// 	})
//
// 	url := URL(server.Addr)
// 	req := url.ToRequest(GET)
// 	resp := req.Call()
//
// 	resp = resp.UseBody(func(reader io.Reader) bool {
// 		body, _ := io.ReadAll(reader)
// 		return string(body) == "response body"
// 	})
//
// 	assert.Nil(t, resp.NetError)
// }
//
// func TestResponse_UseBody_Failure(t *testing.T) {
// 	server := httpTestServer(func(w http.ResponseWriter, r *http.Request) {
// 		w.WriteHeader(http.StatusOK)
// 		_, _ = w.Write([]byte("unexpected body"))
// 	})
//
// 	url := URL(server.Addr)
// 	req := url.ToRequest(GET)
// 	resp := req.Call()
//
// 	resp = resp.UseBody(func(reader io.Reader) bool {
// 		body, _ := io.ReadAll(reader)
// 		return string(body) == "expected body"
// 	})
//
// 	assert.NotNil(t, resp.NetError)
// }
//
// func TestNewURL_WithHTTPSOption(t *testing.T) {
// 	url := URL("example.com").AsProtocol(HTTPS)
// 	assert.Equal(t, "https://example.com", string(url))
// }
//
// func TestNewURL_WithHTTPOption(t *testing.T) {
// 	url := URL("example.com").AsProtocol(HTTP)
// 	assert.Equal(t, "http://example.com", string(url))
// }
//
// // Helper function to create a test server.
// func httpTestServer(handler func(w http.ResponseWriter, r *http.Request)) *http.Server {
// 	fn = handler
// 	return server
// }
