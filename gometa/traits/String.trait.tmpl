
func (s {{.}}) Contains(args ...string) bool  { return gen.Contains(args...)(string(s)) }
func (s {{.}}) HasPrefix(args ...string) bool { return gen.HasPrefix(args...)(string(s)) }
func (s {{.}}) HasSuffix(args ...string) bool { return gen.HasSuffix(args...)(string(s)) }
func (s {{.}}) ReplacePrefix(pats ...string) {{.}} {
	return {{.}}(gen.ReplacePrefix(pats...)(string(s)))
}

func (s {{.}}) ReplaceSuffix(pats ...string) {{.}} {
	return {{.}}(gen.ReplaceSuffix(pats...)(string(s)))
}
func (s {{.}}) Replace(pats ...string) {{.}} { return {{.}}(gen.Replace(pats...)(string(s))) }
func (s {{.}}) ReplaceRegex(pat string, rep string) {{.}} {
	return {{.}}(gen.ReplaceRegex[string](pat, rep)(string(s)))
}
func (s {{.}}) Shift(count int) {{.}} { return {{.}}(gen.Shift[string](count)(string(s))) }
func (s {{.}}) Pop(count int) {{.}}   { return {{.}}(gen.Pop[string](count)(string(s))) }
func (s {{.}}) Split(pats ...string) T.SAr[{{.}}] {
	return gen.SArray[{{.}}]{}.From(gen.SplitWithAll(string(s), false, pats...))
}

func (s {{.}}) Or(Default string) {{.}} {
	if s == "" {
		return {{.}}(Default)
	}
	return s
}
func (s {{.}}) Len() int       { return len(string(s)) }
func (s {{.}}) string() string { return string(s) }
